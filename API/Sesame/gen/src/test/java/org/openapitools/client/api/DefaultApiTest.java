/*
 * Sesame API
 * Sesame API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AuthenticationRequest;
import org.openapitools.client.model.Question;
import org.openapitools.client.model.RegisterRequest;
import org.openapitools.client.model.Reponse;
import org.openapitools.client.model.ResponseEntity;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Ignore
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    
    /**
     * POST api/v1/auth/questions
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addQuestionTest() throws ApiException {
        Question question = null;
        ResponseEntity response = api.addQuestion(question);

        // TODO: test validations
    }
    
    /**
     * POST api/v1/auth/questions/{questionId}/reponses
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addReponseTest() throws ApiException {
        Long questionId = null;
        Reponse reponse = null;
        ResponseEntity response = api.addReponse(questionId, reponse);

        // TODO: test validations
    }
    
    /**
     * POST api/v1/auth/authenticate
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void authenticateTest() throws ApiException {
        AuthenticationRequest authenticationRequest = null;
        ResponseEntity response = api.authenticate(authenticationRequest);

        // TODO: test validations
    }
    
    /**
     * GET api/v1/auth/questions-with-reponses
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllQuestionsWithReponsesTest() throws ApiException {
        ResponseEntity response = api.getAllQuestionsWithReponses();

        // TODO: test validations
    }
    
    /**
     * GET api/v1/auth/current-user
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCurrentUserTest() throws ApiException {
        ResponseEntity response = api.getCurrentUser();

        // TODO: test validations
    }
    
    /**
     * GET api/v1/auth/notifications
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNotificationsTest() throws ApiException {
        ResponseEntity response = api.getNotifications();

        // TODO: test validations
    }
    
    /**
     * GET api/v1/auth/questions/{id}
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getQuestionByIdTest() throws ApiException {
        Long id = null;
        ResponseEntity response = api.getQuestionById(id);

        // TODO: test validations
    }
    
    /**
     * PUT api/v1/auth/notifications/{notificationId}
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void markNotificationAsReadTest() throws ApiException {
        Long notificationId = null;
        ResponseEntity response = api.markNotificationAsRead(notificationId);

        // TODO: test validations
    }
    
    /**
     * POST api/v1/auth/register
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void registerTest() throws ApiException {
        RegisterRequest registerRequest = null;
        ResponseEntity response = api.register(registerRequest);

        // TODO: test validations
    }
    
}
